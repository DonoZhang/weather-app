{"version":3,"sources":["assets/loading.gif","actions/types.js","reducers/posts/reducer.js","reducers/city/reducer.js","reducers/index.js","actions/actions.js","sagas/api.js","sagas/saga.js","createStore.js","components/button/index.js","components/input/index.js","components/Error/index.js","components/Loading/index.js","components/Weather/utilities.js","components/Weather/index.js","containers/App/payloadToProps.js","containers/App/index.js","index.js"],"names":["module","exports","types","initState","city","combineReducers","posts","state","action","type","loading","error","payload","actions","requestApiData","receiveApiData","data","getErrorMessage","e","fireSaga","setCity","fetchingError","cityError","unknownError","fetchData","a","fetch","response","status","json","getApiData","rootSaga","fetchingErrorMessage","cityErrorMessage","unknownErrorMessage","put","store","getState","call","message","takeLatest","sagaMiddleware","createSagaMiddleware","createStore","rootReducer","applyMiddleware","SharedButton","onSubmit","props","emitEvent","buttonText","this","className","data-test","onClick","Component","SharedTextInput","onTextChange","event","input","target","value","setState","textEntered","placeholder","onChange","Error","errorMessage","src","loadingLogo","alt","offsetToTime","offset","current","Date","utc","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getTime","d","h","getHours","m","getMinutes","Weather","_updateTime","time","timezone","timeUpdater","setInterval","clearInterval","weather","icon","weatherBrief","temperature","temperatureHigh","temperatureLow","payloadToProps","main","weatherDescription","description","temp","temp_min","temp_max","visibility","windSpeed","wind","speed","windDegree","deg","sunrise","sys","sunset","name","App","_checkStatus","Loading","length","onTextInputChange","weatherUpdate","fetchWeatherData","undefined","weatherUpdateTimer","configTextInput","configButton","defaultProps","console","log","connect","post","dispatch","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.70053bcb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loading.768b228e.gif\";","export const types = {\n    FIRE_SAGA: \"FIRE_SAGA\",\n    GET_API_DATA: \"GET_API_DATA\",\n    API_DATA_RECEIVED: \"API_DATA_RECEIVED\",\n    REQUEST_ERROR: \"REQUEST_ERROR\",\n    SET_CITY: \"SET_CITY\"\n}","import { types } from '../../actions/types';\n\nconst initState = {};\n\nexport default (state, action) => {\n    if(!state) return initState;\n    switch(action.type){\n        case types.GET_API_DATA:\n            return {...state, loading: true, error: ''};\n        case types.API_DATA_RECEIVED:\n            return {...state, payload: action.payload, loading: false, error: ''};\n        case types.REQUEST_ERROR:\n            return {...state, loading: false, error: action.error};\n        default:\n            return state;\n    }\n};","import { types } from '../../actions/types';\n\nexport const initState = {city: \"Melbourne\"};\n\nexport default (state, action) => {\n    if(!state) return initState;\n    switch(action.type){\n        case types.SET_CITY:\n            return {...state, city: action.city};\n        default:\n            return state;\n    }\n};","import { combineReducers } from 'redux';\nimport posts from './posts/reducer';\nimport city from './city/reducer';\n\nexport default combineReducers({\n    posts,\n    city\n});","import { types } from './types';\n\nexport const actions = {\n    requestApiData : () => ({ type: types.GET_API_DATA }),\n    receiveApiData : data => ({ type: types.API_DATA_RECEIVED, payload: data }),\n    getErrorMessage : e => ({ type: types.REQUEST_ERROR, error: e }),\n    fireSaga: () => ({type: types.FIRE_SAGA}),\n    setCity: city => ({type: types.SET_CITY, city})\n}","export const fetchingError = \"fetching error\";\nexport const cityError = \"city error\";\nexport const unknownError = \"unknown error\";\n\nexport async function fetchData(city){\n    try{\n        let response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},AU&units=metric&APPID=42905b45c73a2763dd8827a8d802be68`);\n        let data;\n        if(response.status === 200)\n            data = await response.json();\n        else if(response.status === 404)\n            data = cityError;\n        else\n            data = unknownError;\n        return data;\n    }\n    catch(e){\n        return fetchingError;\n    }\n}","import { put, takeLatest, call } from 'redux-saga/effects';\nimport { actions } from '../actions/actions';\nimport { fetchData, fetchingError, cityError, unknownError } from './api';\nimport { store } from '../createStore';\n\nexport const fetchingErrorMessage = \"There is a problem with fetching data, please check your internet connection.\";\nexport const cityErrorMessage = \"Sorry, we cannot find the town you are looking for :(\";\nexport const unknownErrorMessage = \"Sorry, unknown error happened\";\n\nexport function* getApiData() {\n  yield put(actions.requestApiData());\n  const city = yield store.getState().city.city;\n  try{\n    const data = yield call(fetchData, city);\n    switch(data){\n      case fetchingError:{\n        yield put(actions.getErrorMessage(fetchingErrorMessage));\n        break;\n      }\n      case cityError:{\n        yield put(actions.getErrorMessage(cityErrorMessage));\n        break;\n      }\n      case unknownError:{\n        yield put(actions.getErrorMessage(unknownErrorMessage));\n        break;\n      }\n      default:{\n        yield put(actions.receiveApiData(data));\n      }\n    }\n  }   \n  catch(e){\n    yield put(actions.getErrorMessage(e.message));\n  }\n}\n\nfunction* rootSaga() {\n   yield takeLatest(actions.fireSaga().type, getApiData);\n}\n\nexport default rootSaga;","import rootReducer from './reducers/index';\nimport { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootSaga from './sagas/saga';\n\nexport const sagaMiddleware = createSagaMiddleware();\nexport const store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\nexport const runSaga = ()=>{sagaMiddleware.run(rootSaga)}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './_index.scss';\n\nclass SharedButton extends Component {\n    static propTypes = {\n        buttonText: PropTypes.string,\n        emitEvent: PropTypes.func\n    }\n\n    onSubmit = ()=>{\n        if(this.props.emitEvent){\n            this.props.emitEvent();\n        }\n    }\n\n    render(){\n        const { buttonText } = this.props;\n        return (\n            <button className=\"button-component\" data-test=\"buttonComponent\" onClick={this.onSubmit}>\n                {buttonText}\n            </button>\n        );\n    }\n}\n\nexport default SharedButton;","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport './_index.scss';\n\nclass SharedTextInput extends Component{\n    static propTypes = {\n        placeholder: PropTypes.string,\n        emitEvent: PropTypes.func\n    }\n\n    constructor(){\n        super();\n        this.state={\n            textEntered: \"\"\n        }\n    }\n\n    onTextChange = (event)=>{\n        const input = event.target.value;\n        this.setState(\n            {\n                textEntered: input\n            }\n        );\n        if(this.props.emitEvent)\n        this.props.emitEvent(input);\n    }\n\n    render(){\n        return (\n            <div className=\"text-input\" data-test=\"text-input\">\n                <input type=\"text\" placeholder={this.props.placeholder} onChange={this.onTextChange} value={this.state.textEntered} />\n            </div>\n        );\n    }\n}\n\nexport default SharedTextInput;\n\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './_index.scss';\n\nclass Error extends Component{\n    static propTypes = {\n        errorMessage: PropTypes.string\n    }\n\n    render(){\n        return (\n            <div className=\"error-page\" data-test=\"error-page\">\n                <div className=\"error-message\" data-test=\"error-message\">\n                    <p>{this.props.errorMessage}</p>\n                </div>\n            </div>);\n    }\n}\n\nexport default Error;\n","import React from 'react';\nimport loadingLogo from '../../assets/loading.gif';\nimport './_index.scss';\n\nexport default ()=>{\n    return (\n        <div className=\"loading-page\" data-test=\"loading-page\">\n            <img data-test=\"loading-image\" src={loadingLogo} alt=\"loading\" />\n        </div>\n    );\n}","export function offsetToTime(offset){\n    var current = new Date();\n    var utc = new Date(\n        current.getUTCFullYear(),\n        current.getUTCMonth(),\n        current.getUTCDate(),\n        current.getUTCHours(),\n        current.getUTCMinutes(), \n        current.getUTCSeconds()\n      ).getTime();\n    var locale = utc + offset*1000;\n    var d = new Date(locale);\n    var h = d.getHours();\n    var m = d.getMinutes()<10?`0${d.getMinutes()}`:d.getMinutes();\n    return `${h}:${m}`;\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { offsetToTime } from './utilities';\nimport './_index.scss';\n\nclass Weather extends Component{\n    static propTypes = {\n        timezone: PropTypes.number,\n        weather: PropTypes.object,\n        city: PropTypes.string\n    }\n\n    constructor(props){\n        super(props);\n        this.state = {\n            time: null\n        }\n    }\n\n    componentDidMount(){\n        this._updateTime();\n        //update time per half minute\n        this.timeUpdater = setInterval(this._updateTime, 30000);\n    }\n\n    componentWillUnmount(){\n        clearInterval(this.timeUpdater);\n    }\n\n    _updateTime = ()=>{\n        this.setState({\n            time: offsetToTime(this.props.timezone)\n        });\n    }\n\n    render(){\n        const city = this.props.city;\n        const weather = this.props.weather;\n        return (\n            <div className=\"weather-page\" data-test=\"weather-page\">\n                <div className=\"city-name\" data-test=\"city-name\">\n                    {city}\n                </div>\n                <div className=\"time-component\" data-test=\"time-component\">\n                    {this.state.time}\n                </div>\n                <div className=\"weather-information\" data-test=\"weather-information\">\n                    <div className=\"weather-icon\" data-test=\"weather-icon\">\n                        <img src={`https://openweathermap.org/img/w/${weather.icon}.png`} alt=\"weather logo\"/>\n                    </div>\n                    <div className=\"weather-brief\" data-test=\"weather-brief\">\n                        {weather.weatherBrief}\n                    </div>\n                </div>\n                <div className=\"temperature\" data-test=\"temperature\">\n                    <div className=\"temperature-current\" data-test=\"temperature-current\">\n                        {weather.temperature}&#8451;\n                    </div>\n                    <div className=\"temperature-range\" data-test=\"temperature-range\">\n                        <div className=\"temperature-highest\" data-test=\"temperature-highest\">\n                            {weather.temperatureHigh}&#8451;\n                        </div>\n                        <div className=\"temperature-lowest\" data-test=\"temperature-lowest\">\n                            {weather.temperatureLow}&#8451;\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Weather;","export const payloadToProps = (payload)=>{\n    let weather;\n    let city;\n    let timezone;\n    weather = {\n        weatherBrief: payload.weather[0].main,\n        weatherDescription: payload.weather[0].description,\n        icon: payload.weather[0].icon,\n        temperature: payload.main.temp,\n        temperatureLow: payload.main.temp_min,\n        temperatureHigh: payload.main.temp_max,\n        visibility: payload.visibility,\n        windSpeed: payload.wind.speed,\n        windDegree: payload.wind.deg,\n        sunrise: payload.sys.sunrise,\n        sunset: payload.sys.sunset\n    };\n    city = payload.name;\n    timezone = payload.timezone;\n    return {weather, city, timezone}\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport SharedButton from '../../components/button/index';\nimport SharedTextInput from '../../components/input/index';\nimport Error from '../../components/Error/index';\nimport Loading from '../../components/Loading/index';\nimport Weather from '../../components/Weather/index';\nimport { connect } from 'react-redux';\nimport { actions } from '../../actions/actions';\nimport { payloadToProps } from './payloadToProps';\nimport './_index.scss';\n\nclass App extends Component{\n    static propTypes = {\n        payload: PropTypes.object,\n        loading: PropTypes.bool,\n        error: PropTypes.string,\n        city: PropTypes.string,\n        fetchWeatherData: PropTypes.func\n    }\n\n    static defaultProps = {\n        payload: {name: \"Nothing yet\"},\n        loading: false,\n        error: \"No error\",\n        fetchWeatherData: ()=>{console.log(\"Need to pass in a function\")}\n    }\n\n    constructor(){\n        super();\n        this.state = {\n            city: undefined\n        }\n    }\n\n    componentDidMount(){\n       this.setState({city: this.props.city});\n       this.weatherUpdate();\n       //update weather per half hour\n       this.weatherUpdateTimer = setInterval(this.weatherUpdate, 1800000);\n    }\n\n    componentWillUnmount(){\n        clearInterval(this.weatherUpdateTimer);\n    }\n\n    _checkStatus = ()=>{\n        const {payload, loading, error} = this.props;\n        if(loading){\n            return <Loading />;\n        }\n        if(error.length > 0){\n            return <Error errorMessage={error}/>;\n        }\n        const props = payloadToProps(payload);\n        return <Weather {...props}/>\n    }\n\n    onTextInputChange = (city)=>{\n        this.setState({city})\n    }\n\n    onSubmit = ()=>{\n        this.props.setCity(this.state.city);\n    }\n\n    weatherUpdate = ()=>{\n        this.props.fetchWeatherData();\n    }\n\n    render(){\n        const configTextInput = {\n            placeholder: \"Please enter the town name\",\n            emitEvent: this.onTextInputChange\n        }\n\n        const configButton = {\n            buttonText: \"Change City\",\n            emitEvent: ()=>{\n                this.onSubmit();\n                this.props.fetchWeatherData();\n            }\n        }\n        \n        return (\n            <div className='app'>\n                <div className='city-search' data-test=\"city-search\">\n                    <SharedTextInput {...configTextInput}/>\n                    <SharedButton {...configButton}/>\n                </div>\n                <div className='page-display'  data-test='page-display'>\n                    {this._checkStatus()}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    const post = state.posts;\n    const city = state.city.city;\n    return {\n        payload: post.payload,\n        loading: post.loading,\n        error: post.error,\n        city\n    };\n}\n\nconst mapDispatchToProps = dispatch =>{\n    return {\n        fetchWeatherData: () => dispatch(actions.fireSaga()),\n        setCity: city => dispatch(actions.setCity(city))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App); ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store, runSaga } from './createStore';\nimport App from './containers/App/index';\nimport './index.scss';\n\nrunSaga();\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));"],"sourceRoot":""}